// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package taskdb

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one

INSERT INTO tasks (project_id, assignee_id, title, description, status, priority, due_date)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, project_id, assignee_id, title, description, status, priority, due_date, created_at, updated_at
`

type CreateTaskParams struct {
	ProjectID   int64         `json:"project_id"`
	AssigneeID  sql.NullInt64 `json:"assignee_id"`
	Title       string        `json:"title"`
	Description string        `json:"description"`
	Status      TaskStatus    `json:"status"`
	Priority    TaskPriority  `json:"priority"`
	DueDate     sql.NullTime  `json:"due_date"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ProjectID,
		arg.AssigneeID,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Priority,
		arg.DueDate,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.AssigneeID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :execrows
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteTask, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT id, project_id, assignee_id, title, description, status, priority, due_date, created_at, updated_at FROM tasks ORDER BY id
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.AssigneeID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskById = `-- name: GetTaskById :one
SELECT id, project_id, assignee_id, title, description, status, priority, due_date, created_at, updated_at FROM tasks WHERE id = $1
`

func (q *Queries) GetTaskById(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.AssigneeID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasksByProjectId = `-- name: GetTasksByProjectId :many
SELECT id, project_id, assignee_id, title, description, status, priority, due_date, created_at, updated_at FROM tasks WHERE project_id = $1 ORDER BY id
`

func (q *Queries) GetTasksByProjectId(ctx context.Context, projectID int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByProjectId, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.AssigneeID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksWithFilters = `-- name: ListTasksWithFilters :many
SELECT id, project_id, assignee_id, title, description, status, priority, due_date, created_at, updated_at
FROM tasks
WHERE 
    (project_id = COALESCE($1, project_id))
  AND (assignee_id = COALESCE($2, assignee_id))
  AND (status = ANY($3))
  AND (priority = COALESCE($4, priority))
  AND (due_date >= COALESCE($5, due_date))
  AND (due_date <= COALESCE($6, due_date))
ORDER BY due_date
LIMIT $8 OFFSET $7
`

type ListTasksWithFiltersParams struct {
	ProjectID   sql.NullInt64    `json:"project_id"`
	AssigneeID  sql.NullInt64    `json:"assignee_id"`
	Statuses    NullTaskStatus   `json:"statuses"`
	Priority    NullTaskPriority `json:"priority"`
	DueDateFrom sql.NullTime     `json:"due_date_from"`
	DueDateTo   sql.NullTime     `json:"due_date_to"`
	Offset      int32            `json:"offset"`
	Limit       int32            `json:"limit"`
}

func (q *Queries) ListTasksWithFilters(ctx context.Context, arg ListTasksWithFiltersParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasksWithFilters,
		arg.ProjectID,
		arg.AssigneeID,
		arg.Statuses,
		arg.Priority,
		arg.DueDateFrom,
		arg.DueDateTo,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.AssigneeID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :execrows

UPDATE tasks
SET
  title = COALESCE($1, title),
  description = COALESCE($2, description),
  due_date = COALESCE($3, due_date),
  status = COALESCE($4, status),
  priority = COALESCE($5, priority),
  updated_at = now()
WHERE id = $6
`

type UpdateTaskParams struct {
	Title       sql.NullString   `json:"title"`
	Description sql.NullString   `json:"description"`
	DueDate     sql.NullTime     `json:"due_date"`
	Status      NullTaskStatus   `json:"status"`
	Priority    NullTaskPriority `json:"priority"`
	ID          int64            `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.Status,
		arg.Priority,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
