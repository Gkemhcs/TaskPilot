// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package taskdb

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ImportJobStatus string

const (
	ImportJobStatusPending    ImportJobStatus = "pending"
	ImportJobStatusInProgress ImportJobStatus = "in_progress"
	ImportJobStatusCompleted  ImportJobStatus = "completed"
	ImportJobStatusFailed     ImportJobStatus = "failed"
)

func (e *ImportJobStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ImportJobStatus(s)
	case string:
		*e = ImportJobStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ImportJobStatus: %T", src)
	}
	return nil
}

type NullImportJobStatus struct {
	ImportJobStatus ImportJobStatus `json:"import_job_status"`
	Valid           bool            `json:"valid"` // Valid is true if ImportJobStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullImportJobStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ImportJobStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ImportJobStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullImportJobStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ImportJobStatus), nil
}

type ImportJobType string

const (
	ImportJobTypeProjectExcel ImportJobType = "project_excel"
	ImportJobTypeTaskExcel    ImportJobType = "task_excel"
)

func (e *ImportJobType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ImportJobType(s)
	case string:
		*e = ImportJobType(s)
	default:
		return fmt.Errorf("unsupported scan type for ImportJobType: %T", src)
	}
	return nil
}

type NullImportJobType struct {
	ImportJobType ImportJobType `json:"import_job_type"`
	Valid         bool          `json:"valid"` // Valid is true if ImportJobType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullImportJobType) Scan(value interface{}) error {
	if value == nil {
		ns.ImportJobType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ImportJobType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullImportJobType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ImportJobType), nil
}

type ProjectColor string

const (
	ProjectColorGREEN  ProjectColor = "GREEN"
	ProjectColorYELLOW ProjectColor = "YELLOW"
	ProjectColorRED    ProjectColor = "RED"
)

func (e *ProjectColor) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProjectColor(s)
	case string:
		*e = ProjectColor(s)
	default:
		return fmt.Errorf("unsupported scan type for ProjectColor: %T", src)
	}
	return nil
}

type NullProjectColor struct {
	ProjectColor ProjectColor `json:"project_color"`
	Valid        bool         `json:"valid"` // Valid is true if ProjectColor is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProjectColor) Scan(value interface{}) error {
	if value == nil {
		ns.ProjectColor, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProjectColor.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProjectColor) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProjectColor), nil
}

type TaskPriority string

const (
	TaskPriorityLOW      TaskPriority = "LOW"
	TaskPriorityMEDIUM   TaskPriority = "MEDIUM"
	TaskPriorityHIGH     TaskPriority = "HIGH"
	TaskPriorityCRITICAL TaskPriority = "CRITICAL"
)

func (e *TaskPriority) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskPriority(s)
	case string:
		*e = TaskPriority(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskPriority: %T", src)
	}
	return nil
}

type NullTaskPriority struct {
	TaskPriority TaskPriority `json:"task_priority"`
	Valid        bool         `json:"valid"` // Valid is true if TaskPriority is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskPriority) Scan(value interface{}) error {
	if value == nil {
		ns.TaskPriority, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskPriority.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskPriority) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskPriority), nil
}

type TaskStatus string

const (
	TaskStatusTODO       TaskStatus = "TODO"
	TaskStatusINPROGRESS TaskStatus = "IN_PROGRESS"
	TaskStatusDONE       TaskStatus = "DONE"
)

func (e *TaskStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskStatus(s)
	case string:
		*e = TaskStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskStatus: %T", src)
	}
	return nil
}

type NullTaskStatus struct {
	TaskStatus TaskStatus `json:"task_status"`
	Valid      bool       `json:"valid"` // Valid is true if TaskStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TaskStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskStatus), nil
}

type ImportJob struct {
	ID           uuid.UUID       `json:"id"`
	FilePath     string          `json:"file_path"`
	ImporterType ImportJobType   `json:"importer_type"`
	Status       ImportJobStatus `json:"status"`
	ErrorMessage sql.NullString  `json:"error_message"`
	CreatedAt    sql.NullTime    `json:"created_at"`
	UpdatedAt    sql.NullTime    `json:"updated_at"`
}

type Project struct {
	ID          int64            `json:"id"`
	UserID      int32            `json:"user_id"`
	Name        string           `json:"name"`
	Description sql.NullString   `json:"description"`
	Color       NullProjectColor `json:"color"`
	CreatedAt   time.Time        `json:"created_at"`
	UpdatedAt   time.Time        `json:"updated_at"`
}

type Task struct {
	ID          int64         `json:"id"`
	ProjectID   int64         `json:"project_id"`
	AssigneeID  sql.NullInt64 `json:"assignee_id"`
	Title       string        `json:"title"`
	Description string        `json:"description"`
	Status      TaskStatus    `json:"status"`
	Priority    TaskPriority  `json:"priority"`
	DueDate     sql.NullTime  `json:"due_date"`
	CreatedAt   time.Time     `json:"created_at"`
	UpdatedAt   time.Time     `json:"updated_at"`
}

type User struct {
	ID             int32     `json:"id"`
	Email          string    `json:"email"`
	Name           string    `json:"name"`
	HashedPassword string    `json:"hashed_password"`
	CreatedAt      time.Time `json:"created_at"`
}
