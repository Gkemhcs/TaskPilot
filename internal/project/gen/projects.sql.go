// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package projectdb

import (
	"context"
	"database/sql"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects ( user_id, name, description, color) VALUES ($1,$2,$3,$4) RETURNING id, user_id, name, description, color, created_at, updated_at
`

type CreateProjectParams struct {
	UserID      int32            `json:"user_id"`
	Name        string           `json:"name"`
	Description sql.NullString   `json:"description"`
	Color       NullProjectColor `json:"color"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.Color,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getProjectById = `-- name: GetProjectById :one
SELECT id, user_id, name, description, color, created_at, updated_at FROM projects WHERE id=$1
`

func (q *Queries) GetProjectById(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectById, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectByName = `-- name: GetProjectByName :one

SELECT id, user_id, name, description, color, created_at, updated_at FROM projects WHERE name=$1 AND user_id=$2
`

type GetProjectByNameParams struct {
	Name   string `json:"name"`
	UserID int32  `json:"user_id"`
}

func (q *Queries) GetProjectByName(ctx context.Context, arg GetProjectByNameParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectByName, arg.Name, arg.UserID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectsByUserId = `-- name: GetProjectsByUserId :many
SELECT id, user_id, name, description, color, created_at, updated_at FROM projects WHERE user_id=$1 ORDER BY id
`

func (q *Queries) GetProjectsByUserId(ctx context.Context, userID int32) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjectsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :exec
UPDATE projects
SET
  name = COALESCE($1, name),
  description = COALESCE($2, description),
  color = COALESCE($3, color) ,
  updated_at = now()
WHERE id = $4
`

type UpdateProjectParams struct {
	Name        sql.NullString   `json:"name"`
	Description sql.NullString   `json:"description"`
	Color       NullProjectColor `json:"color"`
	ID          int64            `json:"id"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.ExecContext(ctx, updateProject,
		arg.Name,
		arg.Description,
		arg.Color,
		arg.ID,
	)
	return err
}
