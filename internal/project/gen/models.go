// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package projectdb

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type ProjectColor string

const (
	ProjectColorGREEN  ProjectColor = "GREEN"
	ProjectColorYELLOW ProjectColor = "YELLOW"
	ProjectColorRED    ProjectColor = "RED"
)

func (e *ProjectColor) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProjectColor(s)
	case string:
		*e = ProjectColor(s)
	default:
		return fmt.Errorf("unsupported scan type for ProjectColor: %T", src)
	}
	return nil
}

type NullProjectColor struct {
	ProjectColor ProjectColor `json:"project_color"`
	Valid        bool         `json:"valid"` // Valid is true if ProjectColor is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProjectColor) Scan(value interface{}) error {
	if value == nil {
		ns.ProjectColor, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProjectColor.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProjectColor) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProjectColor), nil
}

type Project struct {
	ID          int64            `json:"id"`
	UserID      int32            `json:"user_id"`
	Name        string           `json:"name"`
	Description sql.NullString   `json:"description"`
	Color       NullProjectColor `json:"color"`
	CreatedAt   time.Time        `json:"created_at"`
	UpdatedAt   time.Time        `json:"updated_at"`
}

type User struct {
	ID             int32     `json:"id"`
	Email          string    `json:"email"`
	Name           string    `json:"name"`
	HashedPassword string    `json:"hashed_password"`
	CreatedAt      time.Time `json:"created_at"`
}
