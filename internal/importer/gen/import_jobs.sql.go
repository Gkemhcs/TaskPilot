// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: import_jobs.sql

package importerdb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createImportJob = `-- name: CreateImportJob :one
INSERT INTO import_jobs (
  id, file_path, importer_type, user_id, status
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, file_path, importer_type, status, error_message, created_at, updated_at, user_id
`

type CreateImportJobParams struct {
	ID           uuid.UUID       `json:"id"`
	FilePath     string          `json:"file_path"`
	ImporterType ImportJobType   `json:"importer_type"`
	UserID       int32           `json:"user_id"`
	Status       ImportJobStatus `json:"status"`
}

func (q *Queries) CreateImportJob(ctx context.Context, arg CreateImportJobParams) (ImportJob, error) {
	row := q.db.QueryRowContext(ctx, createImportJob,
		arg.ID,
		arg.FilePath,
		arg.ImporterType,
		arg.UserID,
		arg.Status,
	)
	var i ImportJob
	err := row.Scan(
		&i.ID,
		&i.FilePath,
		&i.ImporterType,
		&i.Status,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getImportJob = `-- name: GetImportJob :one
SELECT id, file_path, importer_type, status, error_message, created_at, updated_at, user_id FROM import_jobs
WHERE id = $1 and user_id = $2
`

type GetImportJobParams struct {
	ID     uuid.UUID `json:"id"`
	UserID int32     `json:"user_id"`
}

func (q *Queries) GetImportJob(ctx context.Context, arg GetImportJobParams) (ImportJob, error) {
	row := q.db.QueryRowContext(ctx, getImportJob, arg.ID, arg.UserID)
	var i ImportJob
	err := row.Scan(
		&i.ID,
		&i.FilePath,
		&i.ImporterType,
		&i.Status,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const listImportJobs = `-- name: ListImportJobs :many
SELECT id, file_path, importer_type, status, error_message, created_at, updated_at, user_id FROM import_jobs
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListImportJobsParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListImportJobs(ctx context.Context, arg ListImportJobsParams) ([]ImportJob, error) {
	rows, err := q.db.QueryContext(ctx, listImportJobs, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ImportJob
	for rows.Next() {
		var i ImportJob
		if err := rows.Scan(
			&i.ID,
			&i.FilePath,
			&i.ImporterType,
			&i.Status,
			&i.ErrorMessage,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImportJobStatus = `-- name: UpdateImportJobStatus :exec
UPDATE import_jobs
SET status = $3,
    error_message = $4,
    updated_at = NOW()
WHERE id = $1 and user_id=$2
`

type UpdateImportJobStatusParams struct {
	ID           uuid.UUID       `json:"id"`
	UserID       int32           `json:"user_id"`
	Status       ImportJobStatus `json:"status"`
	ErrorMessage sql.NullString  `json:"error_message"`
}

func (q *Queries) UpdateImportJobStatus(ctx context.Context, arg UpdateImportJobStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateImportJobStatus,
		arg.ID,
		arg.UserID,
		arg.Status,
		arg.ErrorMessage,
	)
	return err
}
