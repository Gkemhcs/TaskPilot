// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: export_jobs.sql

package exporterdb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createExportJob = `-- name: CreateExportJob :one
INSERT INTO export_jobs (id, user_id, export_type)
VALUES ($1, $2, $3)
RETURNING id, user_id, export_type, status, url, error_message, created_at, updated_at
`

type CreateExportJobParams struct {
	ID         uuid.UUID  `json:"id"`
	UserID     int32      `json:"user_id"`
	ExportType ExportType `json:"export_type"`
}

type CreateExportJobRow struct {
	ID           uuid.UUID       `json:"id"`
	UserID       int32           `json:"user_id"`
	ExportType   ExportType      `json:"export_type"`
	Status       ExportJobStatus `json:"status"`
	Url          sql.NullString  `json:"url"`
	ErrorMessage sql.NullString  `json:"error_message"`
	CreatedAt    sql.NullTime    `json:"created_at"`
	UpdatedAt    sql.NullTime    `json:"updated_at"`
}

func (q *Queries) CreateExportJob(ctx context.Context, arg CreateExportJobParams) (CreateExportJobRow, error) {
	row := q.db.QueryRowContext(ctx, createExportJob, arg.ID, arg.UserID, arg.ExportType)
	var i CreateExportJobRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExportType,
		&i.Status,
		&i.Url,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExportJobStatus = `-- name: GetExportJobStatus :one


SELECT id, user_id, status, export_type, url, error_message, created_at, updated_at FROM export_jobs 
WHERE user_id=$1 AND id=$2
`

type GetExportJobStatusParams struct {
	UserID int32     `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) GetExportJobStatus(ctx context.Context, arg GetExportJobStatusParams) (ExportJob, error) {
	row := q.db.QueryRowContext(ctx, getExportJobStatus, arg.UserID, arg.ID)
	var i ExportJob
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.ExportType,
		&i.Url,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateExportJobStatus = `-- name: UpdateExportJobStatus :exec
UPDATE export_jobs
SET status = $2, updated_at = NOW(), error_message = $3
WHERE id = $1 AND user_id = $4
`

type UpdateExportJobStatusParams struct {
	ID           uuid.UUID       `json:"id"`
	Status       ExportJobStatus `json:"status"`
	ErrorMessage sql.NullString  `json:"error_message"`
	UserID       int32           `json:"user_id"`
}

func (q *Queries) UpdateExportJobStatus(ctx context.Context, arg UpdateExportJobStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateExportJobStatus,
		arg.ID,
		arg.Status,
		arg.ErrorMessage,
		arg.UserID,
	)
	return err
}

const updateExportJobURL = `-- name: UpdateExportJobURL :exec
UPDATE export_jobs
SET status = 'completed', url = $2, updated_at = NOW()
WHERE id = $1 AND user_id = $3
`

type UpdateExportJobURLParams struct {
	ID     uuid.UUID      `json:"id"`
	Url    sql.NullString `json:"url"`
	UserID int32          `json:"user_id"`
}

func (q *Queries) UpdateExportJobURL(ctx context.Context, arg UpdateExportJobURLParams) error {
	_, err := q.db.ExecContext(ctx, updateExportJobURL, arg.ID, arg.Url, arg.UserID)
	return err
}
